# -*- coding: utf-8 -*-
"""Uyku Bozukluğu Tahmini_new.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MndNAQ--yXj3x401pVBoisyl2F8N0O_E

# Kütüphanelerin Import Edilmesi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import warnings
from termcolor import colored
import plotly.graph_objects as go
import plotly.figure_factory as ff
from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
warnings.filterwarnings("ignore")

"""# Verisetinin Yüklenmesi"""

df = pd.read_csv('Uyku_verileri.csv')
df.head()

"""

*   Veriseti Kaggle'dan alınmıştır.
*   Toplam 374 satır ve 13 sütundan oluşmaktadır.
*   Tahmin yaptığımız sütun "Sleep Disorder" .



"""

df.shape

"""# Veriseti Hakkında Bilgiler

**Kişi Kimliği** (Person ID): Her birey için tanımlayıcı bir kimlik numarası.

**Cinsiyet** (Gender): Kişinin cinsiyeti (Erkek/Kadın).

**Yaş** (Age): Kişinin yaşı (yıl olarak).

**Meslek** (Occupation): Kişinin mesleği ya da yaptığı iş.

**Uyku Süresi** (Saat) (Sleep Duration): Kişinin günde kaç saat uyuduğu.

**Uyku Kalitesi**  (1-10 arası ölçek) (Quality of Sleep): Uyku kalitesine dair 1 ile 10 arasında öznel bir değerlendirme.

**Fiziksel Aktivite Süresi** (Dakika/gün) (Physical Activity Level): Kişinin günlük olarak fiziksel aktiviteye ayırdığı dakika sayısı.

**Stres Seviyesi** (1-10 arası ölçek) (Stress Level): Kişinin yaşadığı stres düzeyine dair 1 ile 10 arasında öznel bir değerlendirme.

**Vücut Kitle İndeksi Kategorisi** (BMI Category): Kişinin Vücut Kitle İndeksi (VKİ) kategorisi (örneğin: Zayıf, Normal, Kilolu, Obez).

**Tansiyon** (sistolik/diyastolik) (Blood Pressure): Kişinin tansiyonu, büyük tansiyon / küçük tansiyon şeklinde ifade edilir.

**Nabız** (bpm) (Heart Rate): Kişinin dakikadaki istirahat halindeki kalp atış sayısı (bpm: beats per minute).

**Günlük Adım Sayısı** (Daily Steps): Kişinin bir günde attığı adım sayısı.

**Uyku Bozukluğu** (Sleep Disorder): Kişide uyku bozukluğu olup olmadığı ( Hastalık Yok, İnsomnia, Uyku Apnesi).

# Keşifsel Veri Analizi (Eda) - Exploratory Data Analysis
"""

column_names = df.columns.tolist()
print(column_names)

"""

*   Verisetindeki tüm sütunlar


"""

df.info()

"""

*  5 sütun object değerlerden oluşuyor. Kalan sütunlar numerik değerlerden oluşmaktadır. Veri ön işleme adımında object veriler sayısal verilere dönüştürülmüştür.


"""

df.isnull().sum()

"""

*   Boş değer yoktur.


"""

df.describe()

deger_sayisi = (df.nunique())
print(deger_sayisi)

"""

*   Her sütundaki eşsiz (unique) değerlerin sayısını hesaplar.


"""

classes=df['Sleep Disorder'].unique()
print('Sınıflar :',classes)

"""

*  Uyku bozukluğu sınıflarını gösterir.


"""

df['Sleep Disorder'].value_counts()

"""

*   Sınıf dengesizliği olduğunu görebiliyoruz.
*   "No disorder" sınıfı 219 örnekle baskın durumda.
*   "Sleep Apnea" ve "Insomnia" sınıfları ise 77 ve 78 örnekle azınlıkta.




"""

import plotly.express as px

fig = px.histogram(
    df,
    x='Sleep Disorder',
    barmode="group",
    color='Sleep Disorder',
    color_discrete_sequence=['white', '#4A235A', '#C39BD3'],
    text_auto=True
)

fig.update_layout(
    title={
        'text': '<b>Kişilerin Uyku Bozukluğu Dağılımı</b>',
        'x': 0.5,
        'xanchor': 'center',
        'font': {'size': 25}
    },
    xaxis_title='Uyku Bozukluğu',
    yaxis_title='Kişi Sayısı',
    paper_bgcolor='#EBDEF0',
    plot_bgcolor='#EBDEF0',
    showlegend=True
)

fig.update_yaxes(showgrid=False)
fig.show()

"""# Veri Ön İşleme (Data Processing)"""

df.drop(['Person ID'], axis=1, inplace=True)

"""

*  ✅ Person ID sütunu verisetinden çıkarılır.


"""

from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()
df['Gender'] = label_encoder.fit_transform(df['Gender'])
df['Occupation'] = label_encoder.fit_transform(df['Occupation'])
df['BMI Category'] = label_encoder.fit_transform(df['BMI Category'])
df['Sleep Disorder'] = label_encoder.fit_transform(df['Sleep Disorder'])

"""

*  ✅ Her bir kategorik sütun, LabelEncoder kullanılarak 0, 1, 2 gibi sayısal değerlere dönüştürülüyor.

*  Insomnia → 0
*  None → 1
*  Sleep Apnea → 2







"""

df = pd.concat([df, df['Blood Pressure'].str.split('/', expand=True)], axis=1).drop('Blood Pressure', axis=1)
df = df.rename(columns={0: 'BloodPressure_Upper_Value', 1: 'BloodPressure_Lower_Value'})

"""Neden Blood Pressure sütununda Label Encoding uygulamadık ?


*   LabelEncoder, kategorik (nitel) verileri sayılara dönüştürmek için kullanılır. Örneğin "Male", "Female" gibi sınıfları 0 ve 1 gibi değerlere çevirir. Ama "120/80", "140/90" gibi sayısal oranları 0, 1, 2 gibi keyfi sayılara dönüştürmek, verideki anlamı bozar. Bu değerler bir sıralama ya da kategori değil, doğrudan sayısal ölçümler.


*   Aslında burada **Feature Engineering** (Özellik Mühendisliği) yapmış olduk.

*   *  ✅ Verileri int tipine dönüştürdük.
"""

df['BloodPressure_Upper_Value'] = df['BloodPressure_Upper_Value'].astype(int)
df['BloodPressure_Lower_Value'] = df['BloodPressure_Lower_Value'].astype(int)

"""

*   ✅ Tip dönüşümünün kontrolünü yaptık.

"""

print(df['BloodPressure_Upper_Value'].dtype)
print(df['BloodPressure_Lower_Value'].dtype)

df.head()

plt.style.use('seaborn-v0_8-white')
sns.pairplot(data=df,hue='Sleep Disorder',palette='mako')
plt.legend()
plt.show()

correlation=df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation, annot=True, fmt=".2f", annot_kws={"size":8}, linewidths=0.5, cmap='BuPu')
plt.title('Tüm Özelliklerin Korelasyon Analizi')
plt.tight_layout()
plt.show()

"""🔍 Öne Çıkan Korelasyonlar:


*  💡 1. Sleep Duration & Quality of Sleep: 0.88
Çok güçlü bir pozitif korelasyon var.

Uyku süresi arttıkça uyku kalitesi de artıyor → mantıklı ve beklenen bir ilişki.
*   💡 2. Stress Level ile:
Sleep Duration: -0.81
Quality of Sleep: -0.90

Bu, stres arttıkça hem uyku süresi hem de kalitenin düştüğünü gösteriyor → çok anlamlı ve güçlü negatif korelasyonlar.

*   💡 3. BMI Category ile:
Blood Pressure Upper: 0.71
Blood Pressure Lower: 0.75

Vücut kitle indeksi arttıkça kan basıncı da artıyor → fizyolojik açıdan anlamlı bir sonuç.
*   💡 4. Daily Steps & Physical Activity Level: 0.77
Bu da beklenen bir sonuç, fiziksel aktivite düzeyi arttıkça atılan adım sayısı da artıyor.

# ✂️ Veri Bölme(Data Spliting)
"""

X = df.drop(['Sleep Disorder'], axis=1)
y = df['Sleep Disorder']

"""

*  📌 Bağımsız (X) ve bağımlı (y) değişkenlerin ayrılması

*  📌 Hedef değişken "Sleep Disorder"





"""

X_train, X_test, y_train, y_test= train_test_split(X, y, test_size= 0.30, random_state=0)

print(len(X_train))
print(len(X_test))

"""# 🔍 SMOTE


*  📝  SMOTE (Synthetic Minority Over-sampling Technique), dengesiz veri
kümelerinde azınlık sınıfını artırarak daha dengeli bir veri dağılımı oluşturmayı amaçlayan bir yöntemdir.
*  📝  SMOTE eğitim veri setine uygulanır,test setine uygulanmaz.





"""

from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
smote = SMOTE(random_state=0)
X_train_res, y_train_res = smote.fit_resample(X_train, y_train)

print(y_train.value_counts())  # SMOTE uygulamadan önceki sınıf dağılımı
print(y_train_res.value_counts())  # SMOTE sonrası dağılım

pip install lazypredict

"""# 🔍 Lazy Predict"""

from lazypredict.Supervised import LazyClassifier

lazy_model = LazyClassifier(verbose=0, ignore_warnings=True, custom_metric=None)
models, predictions = lazy_model.fit(X_train, X_test, y_train, y_test)
print(models)

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier
from xgboost import XGBClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# 🔍Hiperparametre Ayarı


*  🚀 Hiperparametre ayarı (Hyperparameter Tuning), makine öğrenimi modellerinin performansını optimize etmek için kullanılan bir tekniktir. Hiperparametreler, modelin öğrenme sürecinde değişmeyen, önceden belirlenmiş ayarlardır. Doğru hiperparametre seçimi, modelin doğruluğunu ve genelleme yeteneğini artırabilir.



"""

pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('clf', RandomForestClassifier())
])
param_grid = [
    {
        'clf': [ExtraTreesClassifier()],
        'clf__n_estimators': [100, 200, 300],
        'clf__max_depth': [None, 5, 10],
    },
    {
        'clf': [XGBClassifier()],
        'clf__n_estimators': [100, 200, 300],
        'clf__learning_rate': [0.01, 0.1, 0.3],
    },
    {
        'clf': [RandomForestClassifier()],
        'clf__n_estimators': [100, 200, 300],
        'clf__max_depth': [None, 5, 10],
    },
    {
        'clf': [DecisionTreeClassifier()],
        'clf__max_depth': [None, 5, 10, 15],
    },
    {
        'clf': [SVC()],
        'clf__kernel': ['linear', 'rbf'],
        'clf__C': [0.01, 0.1, 1, 10],
    },
    {
        'clf': [LogisticRegression()],
        'clf__solver': ['liblinear', 'lbfgs'],
        'clf__C': [0.01, 0.1, 1, 10],
    }
]

grid_search = GridSearchCV(pipeline, param_grid, cv=5)
grid_search.fit(X_train, y_train)

best_model = grid_search.best_estimator_

models = [
    ('Extra Trees', ExtraTreesClassifier()),
    ('XGBClassifier', XGBClassifier()),
    ('Random Forest', RandomForestClassifier()),
    ('Decision Tree', DecisionTreeClassifier()),
    ('SVC', SVC()),
    ('Logistic Regression', LogisticRegression())
]

accuracy_scores = []
for name, model in models:
    pipeline = Pipeline([
        ('scaler', StandardScaler()),
        ('clf', model)
    ])
    pipeline.fit(X_train, y_train)
    y_pred = pipeline.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_scores.append(accuracy)

fig = go.Figure(data=go.Bar(x=[name for name, _ in models], y=accuracy_scores))
fig.update_layout(title='Modellerin Karşılaştırılması',
                  xaxis=dict(title='Modeller'),
                  yaxis=dict(title='Doğruluk'))
fig.show()

"""

*   ✅ En iyi model


"""

print("En iyi model:", grid_search.best_estimator_)

importance = best_model.named_steps['clf'].feature_importances_
feature_names = X.columns

sorted_indices = np.argsort(importance)[::-1]
sorted_importance = importance[sorted_indices]
sorted_features = feature_names[sorted_indices]

fig = go.Figure(data=go.Bar(x=sorted_features, y=sorted_importance))
fig.update_layout(title='Özellik Önem Grafiği',
                  xaxis=dict(title='Özellikler'),
                  yaxis=dict(title='Önem'))
fig.show()

"""# 🎯 XGBClassifier Modelinin Sonuçları"""

best_params = grid_search.best_params_
{
    'clf': XGBClassifier(),
    'clf__n_estimators': 200,
    'clf__learning_rate': 0.1
}
from xgboost import XGBClassifier

xgb_best_params = {
    key.replace('clf__', ''): value
    for key, value in best_params.items()
    if key.startswith('clf__')
}

xgb_model = XGBClassifier(**xgb_best_params)

xgb_model.fit(X_train_res, y_train_res)

y_pred = xgb_model.predict(X_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

print("Doğruluk:", accuracy_score(y_test, y_pred))

print("Sınıflandırma Raporu:\n", classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)
class_names = ['Insomnia', 'None', 'Sleep Apnea']
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Purples', xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Tahmin Edilen')
plt.ylabel('Gerçek')
plt.title('Karışıklık Matrisi (Confusion Matrix)')
plt.show()

"""# Cross Validation


*   📌Çapraz doğrulama (Cross-validation), makine öğrenimi modellerinin genelleştirme performansını değerlendirmek için kullanılan bir tekniktir. Modelin farklı veri alt kümeleri üzerinde nasıl çalıştığını görmek için veri seti eğitim ve test bölümlerine ayrılır ve bu işlem birden fazla kez tekrarlanır.
*   📌Stratified K-Fold: Veri seti sınıf dağılımını koruyarak bölünür, özellikle dengesiz veri kümelerinde faydalıdır.

"""

from sklearn.model_selection import cross_val_score, StratifiedKFold
import numpy as np
cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)
cv_scores = cross_val_score(xgb_model, X_train_res, y_train_res, cv=cv, scoring='accuracy')

print("Cross-Validation Scores:", cv_scores)
print("Mean Accuracy:", np.mean(cv_scores))
print("Standard Deviation:", np.std(cv_scores))

import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc
import numpy as np

y_test_probs = xgb_model.predict_proba(X_test)
plt.figure(figsize=(8,6))
unique_classes = sorted(set(y_test))
colors = plt.cm.viridis(np.linspace(0, 1, len(unique_classes)))

for idx, cls in enumerate(unique_classes):
    fpr, tpr, _ = roc_curve(y_test, y_test_probs[:, idx], pos_label=cls)
    roc_auc = auc(fpr, tpr)
    plt.plot(fpr, tpr, color=colors[idx], label=f"{class_names[idx]} (AUC = {roc_auc:.2f})")

plt.plot([0,1], [0,1], linestyle="--", color="gray")

plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Eğrisi - XGBClassifier")
plt.legend()
plt.show()

"""# Açıklamalı Yapay Zeka

*  SHAP (Shapley Additive Explanations): Her özelliğin model tahminine olan katkısını hesaplar.
*  LIME (Local Interpretable Model-Agnostic Explanations): Modelin belirli bir tahmin için nasıl karar verdiğini anlamak için yerel açıklamalar sunar.
"""

import shap
explainer = shap.Explainer(xgb_model)
shap_values = explainer(X_test)
shap.summary_plot(shap_values, X_test)

pip install lime

import lime
import lime.lime_tabular

explainer = lime.lime_tabular.LimeTabularExplainer(X_train_res.values, feature_names=X.columns, class_names=["Insomnia", "None", "Sleep Apnea"], mode="classification")

exp = explainer.explain_instance(X_test.iloc[0].values, xgb_model.predict_proba)
exp.show_in_notebook()